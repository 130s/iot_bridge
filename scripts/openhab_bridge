#!/usr/bin/python
"""
Copyright (c) 2015, Answer17.  All rights reserved.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of openhab_bridge nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
import base64
import rospy, requests, time
from diagnostic_msgs.msg import KeyValue
from multiprocessing import Lock

BASENAME = "openhab"
GROUP_NAME = "ROS"
__version__ = "0.1.0"
MAX_DELAY = 257  # 4 minutes
INITIAL_DELAY = 0.125
REFRESH_COMMAND = "REFRESH"

class OpenhabUpdates(object):
    """
    Send polling request to OpenHAB and process updates
    """
    state_mutex = Lock()        # Lock for modifying the prev_state dict
    prev_state_dict = dict()    # Dict to keep track of previous state of items
    atmos_id = 0                # ID from Openhab REST/atmosphere

    def __init__(self, cmd,params):
        self.command_count = 0
        self.cmd = cmd
        self.params = params
        self.pub = rospy.Publisher("%s_updates" %BASENAME, KeyValue,
                                     queue_size=40)

    def clear_prev_states(self):
        """ Clear the previous states dict """
        with self.state_mutex:
            self.prev_state_dict.clear()

    def polling_header(self):
        """ Header for OpenHAB REST request - polling """
        return {
            "Authorization" : "Basic %s" % self.cmd.auth,
            "X-Atmosphere-Transport" : "long-polling",
            "X-Atmosphere-tracking-id" : self.atmos_id,
            "X-Atmosphere-Framework" : "1.0",
            "Accept" : "application/json"}

    def request_item(self, name):
        """ Request any item in group ROS from OpenHAB when it updates.
         Long-polling will not respond until item updates.
        """
        # When an item in Group ROS changes we will get all items in group ROS
        # and need to determine which has changed
        url = 'http://%s:%s/rest/items/%s'%(self.params.openhab_host,
                                        self.params.openhab_port, name)
        payload = {'type': 'json'}
        try:
            req = requests.get(url, params=payload,
                                headers=self.polling_header())
            if req.status_code != requests.codes.ok:
                req.raise_for_status()
            # Try to parse JSON response
            # At top level, there is type, name, state, link and members array
            members = req.json()["members"]
            for member in members:
                # Each member has a type, name, state and link
                name = member["name"]
                state = member["state"]
                do_publish = True
                with self.state_mutex:
                    # Pub unless we had key before and it hasn't changed
                    if name in self.prev_state_dict:
                        if self.prev_state_dict[name] == state:
                            do_publish = False
                    self.prev_state_dict[name] = state
                if do_publish:
                    self.pub.publish(name, state)
                    rospy.logdebug("publish " + name + ":" + state)
            self.cmd.update_count += 1
            self.cmd.send_stats(False)
            return True
        except ValueError as err:
            rospy.logwarn(err)
            return True
        except requests.exceptions.ConnectionError as err:
            rospy.logwarn(err)
            return False

class OpenhabParams(object):
    """ Get and store openhab params """

    def __init__(self):
        self.openhab_host = rospy.get_param(BASENAME + '/host', "localhost")
        self.openhab_port = rospy.get_param(BASENAME + '/port', 8080)
        self.username = rospy.get_param(BASENAME + '/username', "openhab")
        self.password = rospy.get_param(BASENAME + '/password', "")

class OpenhabCommands(object):
    """
    openhab command subscriber, set subscriber
    """

    def __init__(self):
        self.params = OpenhabParams()
        self.next_send_time = time.localtime()
        rospy.Subscriber("%s_command" %BASENAME, KeyValue, self.command_cb)
        rospy.Subscriber("%s_set" %BASENAME, KeyValue, self.set_cb)

        self.auth = base64.encodestring('%s:%s'
                           %(self.params.username, self.params.password)
                           ).replace('\n', '')
        self.upd = OpenhabUpdates(self, self.params)
        self.command_count = 0
        self.update_count = 0

    def basic_header(self):
        """ Header for OpenHAB REST request - standard """
        return {
                "Authorization" : "Basic %s" %self.auth,
                "Content-type": "text/plain"}

    def post_command(self, key, value):
        """ Post a command to OpenHAB """
        url = 'http://%s:%s/rest/items/%s'%(self.params.openhab_host,
                                    self.params.openhab_port, key)
        req = requests.post(url, data=value,
                                headers=self.basic_header())
        if req.status_code != requests.codes.ok:
            req.raise_for_status()
            
    def put_status(self, key, value):
        """ Put a status update to OpenHAB """
        url = 'http://%s:%s/rest/items/%s/state'%(self.params.openhab_host,
                                    self.params.openhab_port, key)
        req = requests.put(url, data=value, headers=self.basic_header())
        if req.status_code != requests.codes.ok:
            req.raise_for_status()            

    def send_stats(self, force):
        """
        Send bridge statistics to OpenHAB. Only sends once per minute unless
        "force" is true
        """
        current_time = time.time()
        if force or current_time > self.next_send_time:
            self.next_send_time = current_time + 60
            val = "%s Updates:%d Commands:%d"%(time.ctime(current_time),
                                self.update_count, self.command_count)
            self.put_status("ROS_COMMAND", val)
            rospy.logdebug("Stats " + val)

    def command_cb(self, data):
        """
        Callback: rcv command from ROS and POST command to
        OpenHAB REST API.  Special case: If key is "ROS_COMMAND", handle as
        an openhab_bridge command.
        """
        rospy.logdebug("cmd_cb %s %s", data.key, data.value)
        self.command_count += 1
        # Special case where client is asking for refresh of all data
        if data.key == "ROS_COMMAND":
            rospy.logdebug("ROS_COMMAND %s"%data.value)
            if data.value == REFRESH_COMMAND:
                # Clear previous values so that on next update we send all data
                rospy.logdebug("Refresh request")
                self.upd.clear_prev_states()

                # Force update - update value and ROS will send back an update
                self.send_stats(True)
            else:
                rospy.logwarn("Unknown ROS_COMMAND %s" %data.value)
        else:
            # Normal case - Post command to OpenHAB to command a device
            self.post_command(data.key, data.value)
        self.send_stats(False)

    def set_cb(self, data):
        """
        Callback: rcv status from ROS and PUT status to
        OpenHAB REST API
        """
        rospy.logdebug("set_cb %s %s", data.key, data.value)
        self.command_count += 1
        self.put_status(data.key, data.value)
        self.send_stats(False)


def main():
    """
    Loop, sending requests for updates from OpenHAB
    """
    delay = INITIAL_DELAY
    rospy.init_node(BASENAME + "bridge", anonymous=False,
                         log_level=rospy.DEBUG)
    rospy.loginfo("%s_bridge %s started" %(BASENAME, __version__))
    cmd = OpenhabCommands()
    while not rospy.is_shutdown():
        if cmd.upd.request_item(GROUP_NAME):
            delay = INITIAL_DELAY # Successful, reset delay to initial value
        else:
            # Error occurred
            rospy.logdebug(" Sleeping " + str(delay))
            time.sleep(delay) # Time in seconds.
            if delay * 2 <= MAX_DELAY:
                delay = delay * 2   # slow down the more we fail


if __name__ == "__main__":
    main()
